// Code generated by 'yaegi extract github.com/michaelklishin/rabbit-hole/v2'. DO NOT EDIT.

package lib

import (
	"github.com/michaelklishin/rabbit-hole/v2"
	"reflect"
)

func init() {
	Symbols["github.com/michaelklishin/rabbit-hole/v2/rabbithole"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AMQP":                                  reflect.ValueOf(rabbithole.AMQP),
		"AMQP091":                               reflect.ValueOf(rabbithole.AMQP091),
		"AMQP10":                                reflect.ValueOf(rabbithole.AMQP10),
		"AMQPS":                                 reflect.ValueOf(rabbithole.AMQPS),
		"AutomaticAcknowledgment":               reflect.ValueOf(rabbithole.AutomaticAcknowledgment),
		"Base64EncodedSaltedPasswordHashSHA256": reflect.ValueOf(rabbithole.Base64EncodedSaltedPasswordHashSHA256),
		"Base64EncodedSaltedPasswordHashSHA512": reflect.ValueOf(rabbithole.Base64EncodedSaltedPasswordHashSHA512),
		"BindingDestination":                    reflect.ValueOf(rabbithole.BindingDestination),
		"BindingSource":                         reflect.ValueOf(rabbithole.BindingSource),
		"Clustering":                            reflect.ValueOf(rabbithole.Clustering),
		"DAYS":                                  reflect.ValueOf(rabbithole.DAYS),
		"FederationUpstreamComponent":           reflect.ValueOf(rabbithole.FederationUpstreamComponent),
		"GenerateSalt":                          reflect.ValueOf(rabbithole.GenerateSalt),
		"HTTP":                                  reflect.ValueOf(rabbithole.HTTP),
		"HTTPS":                                 reflect.ValueOf(rabbithole.HTTPS),
		"HashingAlgorithmMD5":                   reflect.ValueOf(rabbithole.HashingAlgorithmMD5),
		"HashingAlgorithmSHA256":                reflect.ValueOf(rabbithole.HashingAlgorithmSHA256),
		"HashingAlgorithmSHA512":                reflect.ValueOf(rabbithole.HashingAlgorithmSHA512),
		"MONTHS":                                reflect.ValueOf(rabbithole.MONTHS),
		"MQTT":                                  reflect.ValueOf(rabbithole.MQTT),
		"ManualAcknowledgement":                 reflect.ValueOf(rabbithole.ManualAcknowledgement),
		"NewClient":                             reflect.ValueOf(rabbithole.NewClient),
		"NewTLSClient":                          reflect.ValueOf(rabbithole.NewTLSClient),
		"Prometheus":                            reflect.ValueOf(rabbithole.Prometheus),
		"SECONDS":                               reflect.ValueOf(rabbithole.SECONDS),
		"STOMP":                                 reflect.ValueOf(rabbithole.STOMP),
		"SaltedPasswordHashSHA256":              reflect.ValueOf(rabbithole.SaltedPasswordHashSHA256),
		"SaltedPasswordHashSHA512":              reflect.ValueOf(rabbithole.SaltedPasswordHashSHA512),
		"StabilityExperimental":                 reflect.ValueOf(rabbithole.StabilityExperimental),
		"StabilityStable":                       reflect.ValueOf(rabbithole.StabilityStable),
		"StateDisabled":                         reflect.ValueOf(rabbithole.StateDisabled),
		"StateEnabled":                          reflect.ValueOf(rabbithole.StateEnabled),
		"StateUnsupported":                      reflect.ValueOf(rabbithole.StateUnsupported),
		"WebMQTT":                               reflect.ValueOf(rabbithole.WebMQTT),
		"WebSTOMP":                              reflect.ValueOf(rabbithole.WebSTOMP),
		"YEARS":                                 reflect.ValueOf(rabbithole.YEARS),

		// type definitions
		"AcknowledgementMode":         reflect.ValueOf((*rabbithole.AcknowledgementMode)(nil)),
		"AlarmInEffect":               reflect.ValueOf((*rabbithole.AlarmInEffect)(nil)),
		"AuthMechanism":               reflect.ValueOf((*rabbithole.AuthMechanism)(nil)),
		"AutoDelete":                  reflect.ValueOf((*rabbithole.AutoDelete)(nil)),
		"BackingQueueStatus":          reflect.ValueOf((*rabbithole.BackingQueueStatus)(nil)),
		"BindingInfo":                 reflect.ValueOf((*rabbithole.BindingInfo)(nil)),
		"BindingVertex":               reflect.ValueOf((*rabbithole.BindingVertex)(nil)),
		"BriefChannelDetail":          reflect.ValueOf((*rabbithole.BriefChannelDetail)(nil)),
		"BriefConnectionDetails":      reflect.ValueOf((*rabbithole.BriefConnectionDetails)(nil)),
		"BriefQueueInfo":              reflect.ValueOf((*rabbithole.BriefQueueInfo)(nil)),
		"BrokerContext":               reflect.ValueOf((*rabbithole.BrokerContext)(nil)),
		"ChannelDetails":              reflect.ValueOf((*rabbithole.ChannelDetails)(nil)),
		"ChannelInfo":                 reflect.ValueOf((*rabbithole.ChannelInfo)(nil)),
		"Client":                      reflect.ValueOf((*rabbithole.Client)(nil)),
		"ClusterLink":                 reflect.ValueOf((*rabbithole.ClusterLink)(nil)),
		"ClusterLinkStats":            reflect.ValueOf((*rabbithole.ClusterLinkStats)(nil)),
		"ClusterName":                 reflect.ValueOf((*rabbithole.ClusterName)(nil)),
		"ConnectionInfo":              reflect.ValueOf((*rabbithole.ConnectionInfo)(nil)),
		"ConsumerDetail":              reflect.ValueOf((*rabbithole.ConsumerDetail)(nil)),
		"ConsumerInfo":                reflect.ValueOf((*rabbithole.ConsumerInfo)(nil)),
		"DeleteAfter":                 reflect.ValueOf((*rabbithole.DeleteAfter)(nil)),
		"DetailedExchangeInfo":        reflect.ValueOf((*rabbithole.DetailedExchangeInfo)(nil)),
		"DetailedQueueInfo":           reflect.ValueOf((*rabbithole.DetailedQueueInfo)(nil)),
		"ErlangApp":                   reflect.ValueOf((*rabbithole.ErlangApp)(nil)),
		"ErrorResponse":               reflect.ValueOf((*rabbithole.ErrorResponse)(nil)),
		"ExchangeEgressDetails":       reflect.ValueOf((*rabbithole.ExchangeEgressDetails)(nil)),
		"ExchangeInfo":                reflect.ValueOf((*rabbithole.ExchangeInfo)(nil)),
		"ExchangeIngressDetails":      reflect.ValueOf((*rabbithole.ExchangeIngressDetails)(nil)),
		"ExchangeSettings":            reflect.ValueOf((*rabbithole.ExchangeSettings)(nil)),
		"ExchangeType":                reflect.ValueOf((*rabbithole.ExchangeType)(nil)),
		"ExportedDefinitions":         reflect.ValueOf((*rabbithole.ExportedDefinitions)(nil)),
		"FeatureFlag":                 reflect.ValueOf((*rabbithole.FeatureFlag)(nil)),
		"FederationDefinition":        reflect.ValueOf((*rabbithole.FederationDefinition)(nil)),
		"FederationLinkMap":           reflect.ValueOf((*rabbithole.FederationLinkMap)(nil)),
		"FederationUpstream":          reflect.ValueOf((*rabbithole.FederationUpstream)(nil)),
		"GarbageCollectionDetails":    reflect.ValueOf((*rabbithole.GarbageCollectionDetails)(nil)),
		"GlobalRuntimeParameter":      reflect.ValueOf((*rabbithole.GlobalRuntimeParameter)(nil)),
		"HashingAlgorithm":            reflect.ValueOf((*rabbithole.HashingAlgorithm)(nil)),
		"HealthCheck":                 reflect.ValueOf((*rabbithole.HealthCheck)(nil)),
		"HealthCheckStatus":           reflect.ValueOf((*rabbithole.HealthCheckStatus)(nil)),
		"IngressEgressStats":          reflect.ValueOf((*rabbithole.IngressEgressStats)(nil)),
		"Listener":                    reflect.ValueOf((*rabbithole.Listener)(nil)),
		"MessageStats":                reflect.ValueOf((*rabbithole.MessageStats)(nil)),
		"MetricsGCQueueLength":        reflect.ValueOf((*rabbithole.MetricsGCQueueLength)(nil)),
		"NameAndVhost":                reflect.ValueOf((*rabbithole.NameAndVhost)(nil)),
		"NameDescriptionEnabled":      reflect.ValueOf((*rabbithole.NameDescriptionEnabled)(nil)),
		"NameDescriptionVersion":      reflect.ValueOf((*rabbithole.NameDescriptionVersion)(nil)),
		"NodeInfo":                    reflect.ValueOf((*rabbithole.NodeInfo)(nil)),
		"NodeNames":                   reflect.ValueOf((*rabbithole.NodeNames)(nil)),
		"ObjectTotals":                reflect.ValueOf((*rabbithole.ObjectTotals)(nil)),
		"OperatorPolicy":              reflect.ValueOf((*rabbithole.OperatorPolicy)(nil)),
		"OsPid":                       reflect.ValueOf((*rabbithole.OsPid)(nil)),
		"Overview":                    reflect.ValueOf((*rabbithole.Overview)(nil)),
		"OwnerPidDetails":             reflect.ValueOf((*rabbithole.OwnerPidDetails)(nil)),
		"PagedQueueInfo":              reflect.ValueOf((*rabbithole.PagedQueueInfo)(nil)),
		"PermissionInfo":              reflect.ValueOf((*rabbithole.PermissionInfo)(nil)),
		"Permissions":                 reflect.ValueOf((*rabbithole.Permissions)(nil)),
		"Policy":                      reflect.ValueOf((*rabbithole.Policy)(nil)),
		"PolicyDefinition":            reflect.ValueOf((*rabbithole.PolicyDefinition)(nil)),
		"Port":                        reflect.ValueOf((*rabbithole.Port)(nil)),
		"PortListenerCheckStatus":     reflect.ValueOf((*rabbithole.PortListenerCheckStatus)(nil)),
		"Properties":                  reflect.ValueOf((*rabbithole.Properties)(nil)),
		"Protocol":                    reflect.ValueOf((*rabbithole.Protocol)(nil)),
		"ProtocolListenerCheckStatus": reflect.ValueOf((*rabbithole.ProtocolListenerCheckStatus)(nil)),
		"PublishingChannel":           reflect.ValueOf((*rabbithole.PublishingChannel)(nil)),
		"QueueDeleteOptions":          reflect.ValueOf((*rabbithole.QueueDeleteOptions)(nil)),
		"QueueDetail":                 reflect.ValueOf((*rabbithole.QueueDetail)(nil)),
		"QueueInfo":                   reflect.ValueOf((*rabbithole.QueueInfo)(nil)),
		"QueueSettings":               reflect.ValueOf((*rabbithole.QueueSettings)(nil)),
		"QueueTotals":                 reflect.ValueOf((*rabbithole.QueueTotals)(nil)),
		"RateDetailSample":            reflect.ValueOf((*rabbithole.RateDetailSample)(nil)),
		"RateDetails":                 reflect.ValueOf((*rabbithole.RateDetails)(nil)),
		"ResourceAlarmCheckStatus":    reflect.ValueOf((*rabbithole.ResourceAlarmCheckStatus)(nil)),
		"RuntimeParameter":            reflect.ValueOf((*rabbithole.RuntimeParameter)(nil)),
		"RuntimeParameterValue":       reflect.ValueOf((*rabbithole.RuntimeParameterValue)(nil)),
		"ShovelDefinition":            reflect.ValueOf((*rabbithole.ShovelDefinition)(nil)),
		"ShovelDefinitionDTO":         reflect.ValueOf((*rabbithole.ShovelDefinitionDTO)(nil)),
		"ShovelInfo":                  reflect.ValueOf((*rabbithole.ShovelInfo)(nil)),
		"ShovelStatus":                reflect.ValueOf((*rabbithole.ShovelStatus)(nil)),
		"Stability":                   reflect.ValueOf((*rabbithole.Stability)(nil)),
		"State":                       reflect.ValueOf((*rabbithole.State)(nil)),
		"TimeUnit":                    reflect.ValueOf((*rabbithole.TimeUnit)(nil)),
		"TopicPermissionInfo":         reflect.ValueOf((*rabbithole.TopicPermissionInfo)(nil)),
		"TopicPermissions":            reflect.ValueOf((*rabbithole.TopicPermissions)(nil)),
		"URISet":                      reflect.ValueOf((*rabbithole.URISet)(nil)),
		"UserConnectionInfo":          reflect.ValueOf((*rabbithole.UserConnectionInfo)(nil)),
		"UserInfo":                    reflect.ValueOf((*rabbithole.UserInfo)(nil)),
		"UserLimits":                  reflect.ValueOf((*rabbithole.UserLimits)(nil)),
		"UserLimitsInfo":              reflect.ValueOf((*rabbithole.UserLimitsInfo)(nil)),
		"UserLimitsValues":            reflect.ValueOf((*rabbithole.UserLimitsValues)(nil)),
		"UserSettings":                reflect.ValueOf((*rabbithole.UserSettings)(nil)),
		"UserTags":                    reflect.ValueOf((*rabbithole.UserTags)(nil)),
		"VhostInfo":                   reflect.ValueOf((*rabbithole.VhostInfo)(nil)),
		"VhostLimits":                 reflect.ValueOf((*rabbithole.VhostLimits)(nil)),
		"VhostLimitsInfo":             reflect.ValueOf((*rabbithole.VhostLimitsInfo)(nil)),
		"VhostLimitsValues":           reflect.ValueOf((*rabbithole.VhostLimitsValues)(nil)),
		"VhostSettings":               reflect.ValueOf((*rabbithole.VhostSettings)(nil)),
		"VhostTags":                   reflect.ValueOf((*rabbithole.VhostTags)(nil)),
		"WhoamiInfo":                  reflect.ValueOf((*rabbithole.WhoamiInfo)(nil)),

		// interface wrapper definitions
		"_HealthCheck": reflect.ValueOf((*_github_com_michaelklishin_rabbit_hole_v2_HealthCheck)(nil)),
	}
}

// _github_com_michaelklishin_rabbit_hole_v2_HealthCheck is an interface wrapper for HealthCheck type
type _github_com_michaelklishin_rabbit_hole_v2_HealthCheck struct {
	IValue interface{}
	WOk    func() bool
}

func (W _github_com_michaelklishin_rabbit_hole_v2_HealthCheck) Ok() bool {
	return W.WOk()
}
